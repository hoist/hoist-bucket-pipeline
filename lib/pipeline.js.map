{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"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","file":"pipeline.js","sourcesContent":["'use strict';\nimport Errors from '@hoist/errors';\nimport logger from '@hoist/logger';\nimport {\n  Bucket\n}\nfrom '@hoist/model';\n\nimport {\n  extend\n}\nfrom 'lodash';\n\n/**\n * Pipeline class for interacting with Buckets\n */\nclass BucketPipeline {\n  /**\n   * create a new Pipeline\n   */\n  constructor() {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n  _addHelper(context, key, meta) {\n    return Promise.resolve().then(() => {\n      var options = {\n        application: context.application._id,\n        environment: context.environment\n      };\n      if (key) {\n        options.key = key;\n      }\n      if (meta) {\n        options.meta = meta;\n      } else {\n        options.meta = {};\n      }\n      var newBucket = this._createBucket(options);\n      return newBucket.saveAsync().then((bucket) => {\n        return bucket.toObject();\n      });\n    });\n  }\n  _createBucket(options) {\n    return new Bucket(options);\n  }\n  _saveMetaHelper(bucket, meta) {\n    if (bucket) {\n      if (bucket.meta) {\n        bucket.meta = extend(bucket.meta, meta);\n      } else {\n        bucket.meta = meta;\n      }\n      bucket.markModified('meta');\n      return bucket.saveAsync().then((results) => {\n        return results.meta;\n      });\n    }\n    throw new Errors.bucket.NotFoundError();\n  }\n\n  /**\n   * add a new bucket and set the meta data\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @param {Object} [meta] - any mata data to save\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  add(context, key, meta) {\n    return Promise.resolve()\n      .then(() => {\n        if (!meta && typeof key === 'object') {\n          meta = key;\n          key = null;\n        }\n        if (key) {\n          this._logger.info('resolving context');\n\n          this._logger.info({\n            context: context\n          }, 'looking up bucket');\n          return Bucket.findOneAsync({\n              key: key,\n              environment: context.environment,\n              application: context.application._id\n            })\n            .then((bucket) => {\n              if (bucket) {\n                throw new Errors.bucket.InvalidError('A bucket with key \"' + key + '\" already exists');\n              }\n              return this._addHelper(context, key, meta);\n            });\n        }\n        return this._addHelper(context, key, meta);\n      });\n  }\n\n  /**\n   * load the bucket specified from the database or create it\n   * and set it as the current bucket\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @param {Boolean} [create=false] - should we create the bucket?\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  set(context, key, create) {\n    var self = this;\n    this._logger.info('resolving context');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info({\n          context: context\n        }, 'looking up bucket');\n        return Bucket.findOneAsync({\n            key: key,\n            environment: context.environment,\n            application: context.application._id\n          })\n          .then((bucket) => {\n            this._logger.info({\n              bucket: bucket\n            }, 'bucket lookup complete');\n            if (bucket) {\n              return (context.bucket = bucket.toObject());\n            }\n            if (create) {\n              return self.add(key).then((addedBucket) => {\n                if (addedBucket) {\n                  //add returns an object so don't call to object here\n                  return (context.bucket = addedBucket);\n                }\n                throw new Errors.bucket.SaveError();\n              });\n            }\n            throw new Errors.bucket.NotFoundError();\n          });\n      });\n  }\n\n  /**\n   * get a new bucket from the database\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  get(context, key) {\n    this._logger.info('getting bucket');\n    this._logger.info('retrieving context');\n    return Promise.resolve()\n      .then(() => {\n        if (key) {\n          this._logger.info('loading bucket by key');\n          return Bucket.findOneAsync({\n              key: key,\n              environment: context.environment,\n              application: context.application._id\n            })\n            .then((bucket) => {\n              if (bucket) {\n                return bucket.toObject();\n              }\n              throw new Errors.bucket.NotFoundError();\n            });\n        }\n        if (context.bucket) {\n          this._logger.info('loading from context');\n          return Bucket.findOneAsync({\n            key: context.bucket.key,\n            environment: context.environment,\n            application: context.application._id\n          }).then((bucket) => {\n            if (bucket) {\n              this._logger.info('retrieved bucket');\n              return bucket.toObject();\n            }\n            this._logger.info('no bucket found');\n            throw new Errors.bucket.NotFoundError();\n          });\n        }\n        return null;\n      });\n  }\n\n  /**\n   * remove bucket from the database\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @returns {Promise} - the Promise to have deleted the bucket\n   */\n  remove(context, key) {\n    this._logger.info('remove bucket');\n    this._logger.info('getting context');\n    return Promise.resolve()\n      .then(() => {\n        if (key) {\n          this._logger.info('removing bucket by key');\n          return Bucket.removeAsync({\n            key: key,\n            environment: context.environment,\n            application: context.application._id\n          }).then(() => {\n\n            if (context.bucket && context.bucket.key === key) {\n              this._logger.info('removing bucket from context');\n              context.bucket = null;\n            }\n          });\n        }\n        if (context.bucket) {\n          this._logger.info('removing bucket by context');\n          return Bucket.removeAsync({\n            key: context.bucket.key,\n            environment: context.environment,\n            application: context.application._id\n          }).then(() => {\n            this._logger.info('removing bucket from context');\n            context.bucket = null;\n          });\n        }\n        return null;\n\n      });\n  }\n\n  /**\n   * get all application buckets from the database\n   * @param {Context} context - the current context\n   * @returns {Promise<Array<Object>>} - an Array of Buckets in object form\n   */\n  getAll(context) {\n    this._logger.info('getting all buckets');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info('loaded context');\n        return Bucket.findAsync({\n          environment: context.environment,\n          application: context.application._id\n        }).then((buckets) => {\n          this._logger.info({\n            bucketCount: buckets.length\n          }, 'returning buckets');\n          return buckets.map((bucket) => {\n\n            return bucket.toObject();\n          });\n        });\n      });\n  }\n\n  /**\n   * run a function over every bucket in the organisation\n   * @param {Context} context - the current context\n   * @param {function(Bucket: bucket)} fn - the function to run\n   * @returns {Promise} - promise to have run the function over each bucket\n   */\n  each(context, fn) {\n    this._logger.info('calling each');\n    return this.getAll(context).then((buckets) => {\n      this._logger.info('running function against each bucket');\n      return Promise.all(buckets.map((bucket) => {\n        this._logger.info({\n          bucketId: bucket._id\n        }, 'running function against a bucket');\n        return Promise.resolve(fn(bucket));\n      }));\n    });\n  }\n\n  /**\n   * sets and replaces meta data against a bucket\n   * @param {Context} context - the current context\n   * @param {Object} meta - the mata data to save\n   * @param {String} [key] - the unique key for the bucket, if not set use the current context bucket\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  saveMeta(context, meta, key) {\n    this._logger.info('saving meta data');\n    this._logger.info('getting context');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info('retrieved context');\n        if (key) {\n          this._logger.info('finding bucket by key');\n          return Bucket.findOneAsync({\n              key: key,\n              environment: context.environment,\n              application: context.application._id\n            })\n            .then((bucket) => {\n              this._logger.info('saving meta data to bucket');\n              return this._saveMetaHelper(bucket, meta);\n            });\n        }\n        if (context.bucket) {\n          this._logger.info('finding bucket by context');\n          return Bucket.findOneAsync({\n            key: context.bucket.key,\n            environment: context.environment,\n            application: context.application._id\n          }).then((bucket) => {\n            this._logger.info('saving meta data to bucket');\n            return this._saveMetaHelper(bucket, meta);\n          });\n        }\n        this._logger.info('no bucket found');\n        throw new Errors.bucket.NotFoundError();\n      });\n  }\n}\n\nexport default BucketPipeline;\n\n/**\n * @external {Context} https://github.com/hoist/hoist-context/blob/feature/remove_cls/src/index.js\n */\n"],"sourceRoot":"/source/"}