{"version":3,"sources":["pipeline.js"],"names":[],"mappings":"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","file":"pipeline.js","sourcesContent":["'use strict';\nimport Errors from '@hoist/errors';\nimport logger from '@hoist/logger';\nimport {\n  Bucket\n}\nfrom '@hoist/model';\n\nimport {\n  extend\n}\nfrom 'lodash';\n\n/**\n * Pipeline class for interacting with Buckets\n */\nclass BucketPipeline {\n  /**\n   * create a new Pipeline\n   */\n  constructor() {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n  _addHelper(context, key, meta) {\n    return Promise.resolve().then(() => {\n      var options = {\n        application: context.application._id,\n        environment: context.environment\n      };\n      if (key) {\n        options.key = key;\n      }\n      if (meta) {\n        options.meta = meta;\n      } else {\n        options.meta = {};\n      }\n      var newBucket = this._createBucket(options);\n      return newBucket.saveAsync().then((bucket) => {\n        return bucket.toObject();\n      });\n    });\n  }\n  _createBucket(options) {\n    return new Bucket(options);\n  }\n  _saveMetaHelper(bucket, meta) {\n    if (bucket) {\n      if (bucket.meta) {\n        bucket.meta = extend(bucket.meta, meta);\n      } else {\n        bucket.meta = meta;\n      }\n      bucket.markModified('meta');\n      return bucket.saveAsync().then((results) => {\n        return results[0].meta;\n      });\n    }\n    throw new Errors.bucket.NotFoundError();\n  }\n\n  /**\n   * add a new bucket and set the meta data\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @param {Object} [meta] - any mata data to save\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  add(context, key, meta) {\n    return Promise.resolve()\n      .then(() => {\n        if (!meta && typeof key === 'object') {\n          meta = key;\n          key = null;\n        }\n        if (key) {\n          this._logger.info('resolving context');\n\n          this._logger.info({\n            context: context\n          }, 'looking up bucket');\n          return Bucket.findOneAsync({\n              key: key,\n              environment: context.environment,\n              application: context.application._id\n            })\n            .then((bucket) => {\n              if (bucket) {\n                throw new Errors.bucket.InvalidError('A bucket with key \"' + key + '\" already exists');\n              }\n              return this._addHelper(context, key, meta);\n            });\n        }\n        return this._addHelper(context, key, meta);\n      });\n  }\n\n  /**\n   * load the bucket specified from the database or create it\n   * and set it as the current bucket\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @param {Boolean} [create=false] - should we create the bucket?\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  set(context, key, create) {\n    var self = this;\n    this._logger.info('resolving context');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info({\n          context: context\n        }, 'looking up bucket');\n        return Bucket.findOneAsync({\n            key: key,\n            environment: context.environment,\n            application: context.application._id\n          })\n          .then((bucket) => {\n            this._logger.info({\n              bucket: bucket\n            }, 'bucket lookup complete');\n            if (bucket) {\n              return (context.bucket = bucket.toObject());\n            }\n            if (create) {\n              return self.add(key).then((addedBucket) => {\n                if (addedBucket) {\n                  //add returns an object so don't call to object here\n                  return (context.bucket = addedBucket);\n                }\n                throw new Errors.bucket.SaveError();\n              });\n            }\n            throw new Errors.bucket.NotFoundError();\n          });\n      });\n  }\n\n  /**\n   * get a new bucket from the database\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  get(context, key) {\n    this._logger.info('getting bucket');\n    this._logger.info('retrieving context');\n    return Promise.resolve()\n      .then(() => {\n        if (key) {\n          this._logger.info('loading bucket by key');\n          return Bucket.findOneAsync({\n              key: key,\n              environment: context.environment,\n              application: context.application._id\n            })\n            .then((bucket) => {\n              if (bucket) {\n                return bucket.toObject();\n              }\n              throw new Errors.bucket.NotFoundError();\n            });\n        }\n        if (context.bucket) {\n          this._logger.info('loading from context');\n          return Bucket.findOneAsync({\n            key: context.bucket.key,\n            environment: context.environment,\n            application: context.application._id\n          }).then((bucket) => {\n            if (bucket) {\n              this._logger.info('retrieved bucket');\n              return bucket.toObject();\n            }\n            this._logger.info('no bucket found');\n            throw new Errors.bucket.NotFoundError();\n          });\n        }\n        return null;\n      });\n  }\n\n  /**\n   * remove bucket from the database\n   * @param {Context} context - the current context\n   * @param {String} key - the unique key for the bucket\n   * @returns {Promise} - the Promise to have deleted the bucket\n   */\n  remove(context, key) {\n    this._logger.info('remove bucket');\n    this._logger.info('getting context');\n    return Promise.resolve()\n      .then(() => {\n        if (key) {\n          this._logger.info('removing bucket by key');\n          return Bucket.removeAsync({\n            key: key,\n            environment: context.environment,\n            application: context.application._id\n          }).then(() => {\n\n            if (context.bucket && context.bucket.key === key) {\n              this._logger.info('removing bucket from context');\n              context.bucket = null;\n            }\n          });\n        }\n        if (context.bucket) {\n          this._logger.info('removing bucket by context');\n          return Bucket.removeAsync({\n            key: context.bucket.key,\n            environment: context.environment,\n            application: context.application._id\n          }).then(() => {\n            this._logger.info('removing bucket from context');\n            context.bucket = null;\n          });\n        }\n        return null;\n\n      });\n  }\n\n  /**\n   * get all application buckets from the database\n   * @param {Context} context - the current context\n   * @returns {Promise<Array<Object>>} - an Array of Buckets in object form\n   */\n  getAll(context) {\n    this._logger.info('getting all buckets');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info('loaded context');\n        return Bucket.findAsync({\n          environment: context.environment,\n          application: context.application._id\n        }).then((buckets) => {\n          this._logger.info({\n            bucketCount: buckets.length\n          }, 'returning buckets');\n          return buckets.map((bucket) => {\n\n            return bucket.toObject();\n          });\n        });\n      });\n  }\n\n  /**\n   * run a function over every bucket in the organisation\n   * @param {Context} context - the current context\n   * @param {function(Bucket: bucket)} fn - the function to run\n   * @returns {Promise} - promise to have run the function over each bucket\n   */\n  each(context, fn) {\n    this._logger.info('calling each');\n    return this.getAll(context).then((buckets) => {\n      this._logger.info('running function against each bucket');\n      return Promise.all(buckets.map((bucket) => {\n        this._logger.info({\n          bucketId: bucket._id\n        }, 'running function against a bucket');\n        return Promise.resolve(fn(bucket));\n      }));\n    });\n  }\n\n  /**\n   * sets and replaces meta data against a bucket\n   * @param {Context} context - the current context\n   * @param {Object} meta - the mata data to save\n   * @param {String} [key] - the unique key for the bucket, if not set use the current context bucket\n   * @returns {Promise<Object>} - the Bucket in object form\n   */\n  saveMeta(context, meta, key) {\n    this._logger.info('saving meta data');\n    this._logger.info('getting context');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info('retrieved context');\n        if (key) {\n          this._logger.info('finding bucket by key');\n          return Bucket.findOneAsync({\n              key: key,\n              environment: context.environment,\n              application: context.application._id\n            })\n            .then((bucket) => {\n              this._logger.info('saving meta data to bucket');\n              return this._saveMetaHelper(bucket, meta);\n            });\n        }\n        if (context.bucket) {\n          this._logger.info('finding bucket by context');\n          return Bucket.findOneAsync({\n            key: context.bucket.key,\n            environment: context.environment,\n            application: context.application._id\n          }).then((bucket) => {\n            this._logger.info('saving meta data to bucket');\n            return this._saveMetaHelper(bucket, meta);\n          });\n        }\n        this._logger.info('no bucket found');\n        throw new Errors.bucket.NotFoundError();\n      });\n  }\n}\n\nexport default BucketPipeline;\n\n/**\n * @external {Context} https://github.com/hoist/hoist-context/blob/feature/remove_cls/src/index.js\n */\n"],"sourceRoot":"/source/"}